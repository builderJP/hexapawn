@startuml
'https://plantuml.com/class-diagram


class Pawn{
    - direction
    - {field} pawnID
    - type
    + Pawn(PawnTypes type, int pawnID)
    + Pawn(Pawn otherPawn)
    + equals(otherObj)
    + getDirection()
    + getPawnID()
    + getType()
}

class HexapawnBoard{
    - Pawn[][] board
    + HexapawnBoard()
    + void move(int pawnID)
    + void attack(int pawnID, boolean isAttackingWestward)
    + StatesOfGame doesWinnerExist(boolean isWhitesTurn)
    + Pawn[][] getBoard()
    + void resetBoard()
    - int[] getPawnPosition(int pawnID)
    - Pawn removePawn(int[] postionOfPawn)
    - boolean isInBounds(int targetRow, int targetColumn)
    - PawnTypes getOpponentsColor(Pawn targetPawn)
}

class BoardDrawer{
    - Pawn[][] hexapawnBoard;
    - final boolean[][] isBlackTile
    + BoardDrawer()
    + drawBoard(Pawn[][] board)
    - String drawPawn(int curLine, int curRowIndex, int curColumnIndex, PawnTypes pawnType)
    - String drawEmptySquare(int curRowIndex, int curColumnIndex)
}

class HexapawnBlackPerfectGameTree{
    + String getBestMove(Pawn[][] hexapawnBoard)
    - String boardToString(Pawn[][] hexapawnBoard)
}

class Main{
    + void {static} main(String[] args)
}

enum PawnTypes{
    WHITE
    BLACK
    BLANK_SPACE
}

enum Directions{
    FORWARDS
    BACKWARDS
    BLANK_SPACE
}

enum StatesOfGame{
    WHITE_WON
    BLACK_WON
    NO_WINNER
}

Pawn o-- PawnTypes
Pawn o-- Directions
HexapawnBoard o-- StatesOfGame
BoardDrawer "Gets board" <--o Main
HexapawnBlackPerfectGameTree "Gets board" <--o Main
Main o-- HexapawnBoard
HexapawnBoard "One" o-- "Many" Pawn : contains

@enduml